{"pageProps":{"note":{"title":"Upload Files To Github Release With Actions","content":"At Saturday Drive, we recently migrated from Gitlab to Github. While we were setting up the Github actions for CI, we decidied to improve our process for generating ZIP files of our [[wordpress]] plugins. The goal was to make this process constent. We also wanted to make it easier for non-engineers to test works in progress. So part of the goal was to make it so anyone with permissions could create a release of a plugin from Github's UI, wait a few minutes and then be able to download an optimized ZIP file of any branch. The process to make this ZIP will be the same for beta testing, and buildign final release files for WordPress.org or our eCommerce sites. These optimzied zips only have the files needed to run the plugins, with development dependencies, configuration files and unminifinied JavaScript and tests removed. This is a process we have documented, that can be run at the command line if all neccasary software is installed.\r\n\r\n## Useful Documentation Links\r\n\r\n- ttps://docs.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables\r\n\r\n## Options\r\n\r\n- https://github.com/marketplace/actions/upload-assets-to-a-release\r\n- https://github.com/marketplace/actions/github-release-create-update-and-upload-assets\r\n- https://github.com/marketplace/actions/upload-files-to-a-github-release Check mark emoji\r\n\r\n## Respect For Grunt First\r\n\r\nI was very tempted to use my favorite JavaScript task runner: Grunt. Why? It works. The WordPress plugin I'm testing with was generated with WP-CLI, and that incluses a grunt file.\r\n\r\nWhen I was at Pods and starting CalderaWP we created a Grunt build script that's still being used all over Caldera stuff via copypasta and it works.\r\n\r\nAnyway, respect for an old friend. Back to convincining the cloud to do what we want for us.\r\n\r\n## Attempt One\r\n\r\n[My first attempt](https://github.com/Shelob9/actions-test/blob/46f011fcba61e6064beaeb407ef9e04bb3c663de/.github/workflows/zip.yml) was a pretty good learning experience. It didn't work. I forked [10up's scn deploy action](https://github.com/10up/action-wordpress-plugin-deploy) and tried to only use it to build the ZIP and do the upload.\r\n\r\nThe deploy action uses a .distignore file. I liked the idea of a root-level file that says what NOT to include in the ZIP file. This format uses same syntax as .gitignore. It is also compatible with the WP CLI create archive command. Not sure why I never used that.\r\n\r\n## Attempt Two\r\n\r\nPlan for two orgininally was to use these two actions:\r\n\r\n- [For ZIPing](https://github.com/marketplace/actions/create-zip-file)\r\n- [For upload](https://github.com/marketplace/actions/upload-files-to-a-github-release)\r\n\r\n[Then I found the simplest option for zipping files and adding them as artifacts](https://github.com/marketplace/actions/easy-zip-files), but did not support using a distignore file. But, if the plugin has a build script that generates a directory to be ZIPed -- for example Caldera Forms or the Saturday Drive monorepo, this was most of what we needed.\r\n\r\nThat ZIP action adds an artifact to the workflow run, not the release. So we used the [upload action](https://github.com/marketplace/actions/upload-files-to-a-github-release) to upload files to each relase.\r\n\r\nHere is the pull request: https://github.com/CalderaWP/Caldera-Forms/pull/3591\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[wordpress]: wordpress \"WordPress\"\r\n[//end]: # \"Autogenerated link references\"\r\n","slug":"gh-actions-upload-files-to-releases","references":[{"slug":"wordpress","url":"/notes/wordpress"}]},"slug":"gh-actions-upload-files-to-releases"},"__N_SSG":true}