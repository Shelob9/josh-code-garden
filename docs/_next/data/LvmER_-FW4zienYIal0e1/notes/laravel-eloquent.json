{"pageProps":{"note":{"title":"Laravel Eloquent","content":"- [Documentation](https://laravel.com/docs/8.x/eloquent)\r\n- [Elqouent Performance Patterns Course](https://eloquent-course.reinink.ca/)\r\n- [[laravel]]\r\n\r\n## Measuring and Optimizing Queries\r\n\r\n- Use Laravel debug bar to find slow queries.\r\n- If database usage is too much, start by only select columns you need.\r\n  - Can do this with relationships, using callback funciton passed to `with()`:\r\n\r\n```php\r\nPost::query()\r\n    ->select(['id', 'title'])\r\n    ->with( ['author' => function(&$query){\r\n        return $query->select( ['id', 'name' ] );\r\n    }]);\r\n```\r\n\r\nYou can use a colon instead of callback:\r\n\r\n```php\r\nPost::query()\r\n    ->select(['id', 'title'])\r\n    ->with( 'author:id,name' );\r\n```\r\n\r\n## Get A Record From A `hasMany` Relationship\r\n\r\n- Eager-loading can avoid n+1 query problems, but can lead to having to load tons of mdoels, using lots of memories.\r\n\r\nThis prevents extra queries for relationship between users and logins models, but loads every login model to do the sort.\r\n\r\n```php\r\n    @foreach( $users as $user ){\r\n        {{$user->logins()->latest()->first()->created_at}}\r\n    }\r\n```\r\n\r\nUsing sub-queries allows us to add additional columns to the query based on computations of another table. Use `addSelect()` method.\r\n\r\n```php\r\n$users = User::query()\r\n    //Add a virtual column\r\n    ->addSelect( ['last_login_at' => Login::select('created_at')\r\n        //Query by the user's ID\r\n        ->whereColumn( 'user_id', 'user.id' )\r\n        ->latest()\r\n        ->take(1)//subqueries MUST return 1 record in MySQL.\r\n    ]);\r\n```\r\n\r\nThis will give us effectively two queries, MySQL optimizes the sub queries into one query.\r\n\r\nUse virtual column:\r\n\r\n```php\r\n{{$user->last_login_at}}\r\n```\r\n\r\nThis column is a string, not automatically casted to a Carbon instance:\r\n\r\n```php\r\n    ->withCasts(['last_login_at' => 'datetime' ] )\r\n```\r\n\r\nMoving query logic from controller to [scopes](https://laravel.com/docs/8.x/eloquent#query-scopes) in model, makes login reusable, and we can add them toghether.\r\n","slug":"laravel-eloquent","references":[{"slug":"laravel","url":"/notes/laravel"}]},"slug":"laravel-eloquent"},"__N_SSG":true}